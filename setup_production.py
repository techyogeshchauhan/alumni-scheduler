#!/usr/bin/env python3
"""
Production setup script for Alumni Event Scheduler
Configures the application for production deployment
"""
import os
import sys
import subprocess
import secrets
from pathlib import Path

def generate_secret_key():
    """Generate a secure secret key"""
    return secrets.token_urlsafe(32)

def create_production_env():
    """Create production environment file"""
    env_content = f"""# Production Environment Configuration
# Generated by setup_production.py

# Flask Configuration
SECRET_KEY={generate_secret_key()}
JWT_SECRET_KEY={generate_secret_key()}
FLASK_ENV=production
FLASK_DEBUG=False

# Database Configuration
MONGO_URI=mongodb://admin:password123@mongodb:27017/alumni_db?authSource=admin
MONGO_DB_NAME=alumni_db

# Redis Configuration
REDIS_URL=redis://redis:6379/0

# Email Configuration (Update with your settings)
MAIL_SERVER=smtp.gmail.com
MAIL_PORT=587
MAIL_USE_TLS=True
MAIL_USERNAME=your-email@gmail.com
MAIL_PASSWORD=your-app-password

# SendGrid Configuration (Optional - for production email)
SENDGRID_API_KEY=your-sendgrid-api-key

# Twilio Configuration (Optional - for SMS notifications)
TWILIO_SID=your-twilio-sid
TWILIO_AUTH_TOKEN=your-twilio-auth-token
TWILIO_PHONE_NUMBER=+1234567890

# Firebase Cloud Messaging (Optional - for push notifications)
FCM_SERVER_KEY=your-fcm-server-key

# Application Configuration
APP_NAME=Alumni Event Scheduler
APP_VERSION=1.0.0
FRONTEND_URL=https://your-domain.com
ADMIN_EMAIL=admin@your-domain.com

# Security Configuration
SESSION_COOKIE_SECURE=True
SESSION_COOKIE_HTTPONLY=True
SESSION_COOKIE_SAMESITE=Lax

# CORS Configuration
CORS_ORIGINS=https://your-domain.com,https://www.your-domain.com

# File Upload Configuration
UPLOAD_FOLDER=static/uploads
MAX_CONTENT_LENGTH=16777216

# Logging Configuration
LOG_LEVEL=INFO
LOG_FILE=logs/app.log

# Feature Flags
ENABLE_REGISTRATION=True
ENABLE_EMAIL_NOTIFICATIONS=True
ENABLE_SMS_NOTIFICATIONS=False
ENABLE_PUSH_NOTIFICATIONS=False
ENABLE_FILE_UPLOADS=True
ENABLE_ANALYTICS=True

# Timezone
DEFAULT_TIMEZONE=UTC

# Rate Limiting
RATELIMIT_DEFAULT=1000 per hour
RATELIMIT_STORAGE_URL=redis://redis:6379/0

# Password Requirements
PASSWORD_MIN_LENGTH=8
PASSWORD_REQUIRE_UPPERCASE=True
PASSWORD_REQUIRE_LOWERCASE=True
PASSWORD_REQUIRE_NUMBERS=True
PASSWORD_REQUIRE_SPECIAL=True
"""
    
    with open('.env.production', 'w') as f:
        f.write(env_content)
    
    print("âœ… Created .env.production file")
    print("   Please update the configuration with your actual values")

def create_nginx_config():
    """Create nginx configuration"""
    nginx_config = """upstream alumni_app {
    server web:5000;
}

server {
    listen 80;
    server_name your-domain.com www.your-domain.com;
    
    # Redirect HTTP to HTTPS
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name your-domain.com www.your-domain.com;
    
    # SSL Configuration
    ssl_certificate /etc/nginx/ssl/cert.pem;
    ssl_certificate_key /etc/nginx/ssl/key.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    
    # Security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    
    # Client max body size for file uploads
    client_max_body_size 16M;
    
    # Static files
    location /static/ {
        alias /app/static/;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
    
    # API routes
    location /api/ {
        proxy_pass http://alumni_app;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
    
    # Main application
    location / {
        proxy_pass http://alumni_app;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
}
"""
    
    with open('nginx.conf', 'w') as f:
        f.write(nginx_config)
    
    print("âœ… Created nginx.conf file")
    print("   Please update the server_name and SSL certificate paths")

def create_systemd_service():
    """Create systemd service file"""
    service_content = """[Unit]
Description=Alumni Event Scheduler
After=network.target mongodb.service redis.service

[Service]
Type=exec
User=www-data
Group=www-data
WorkingDirectory=/opt/alumni-scheduler
Environment=PATH=/opt/alumni-scheduler/venv/bin
ExecStart=/opt/alumni-scheduler/venv/bin/gunicorn --config gunicorn.conf.py app:app
ExecReload=/bin/kill -s HUP $MAINPID
Restart=always
RestartSec=3

[Install]
WantedBy=multi-user.target
"""
    
    with open('alumni-scheduler.service', 'w') as f:
        f.write(service_content)
    
    print("âœ… Created alumni-scheduler.service file")
    print("   Copy to /etc/systemd/system/ and run: sudo systemctl enable alumni-scheduler")

def create_gunicorn_config():
    """Create gunicorn configuration"""
    gunicorn_config = """# Gunicorn configuration for Alumni Event Scheduler
bind = "0.0.0.0:5000"
workers = 4
worker_class = "sync"
worker_connections = 1000
timeout = 30
keepalive = 2
max_requests = 1000
max_requests_jitter = 100
preload_app = True
worker_tmp_dir = "/dev/shm"

# Logging
accesslog = "logs/access.log"
errorlog = "logs/error.log"
loglevel = "info"
access_log_format = '%(h)s %(l)s %(u)s %(t)s "%(r)s" %(s)s %(b)s "%(f)s" "%(a)s" %(D)s'

# Process naming
proc_name = "alumni_scheduler"

# Security
limit_request_line = 4094
limit_request_fields = 100
limit_request_field_size = 8190
"""
    
    with open('gunicorn.conf.py', 'w') as f:
        f.write(gunicorn_config)
    
    print("âœ… Created gunicorn.conf.py file")

def create_logrotate_config():
    """Create logrotate configuration"""
    logrotate_config = """/opt/alumni-scheduler/logs/*.log {
    daily
    missingok
    rotate 52
    compress
    delaycompress
    notifempty
    create 644 www-data www-data
    postrotate
        systemctl reload alumni-scheduler
    endscript
}
"""
    
    with open('logrotate.conf', 'w') as f:
        f.write(logrotate_config)
    
    print("âœ… Created logrotate.conf file")
    print("   Copy to /etc/logrotate.d/alumni-scheduler")

def create_monitoring_script():
    """Create monitoring script"""
    monitoring_script = """#!/bin/bash
# Alumni Event Scheduler Health Check Script

APP_URL="http://localhost:5000/api/health"
LOG_FILE="/opt/alumni-scheduler/logs/health.log"

# Check if the application is responding
response=$(curl -s -o /dev/null -w "%{http_code}" $APP_URL)

if [ $response -eq 200 ]; then
    echo "$(date): Health check passed" >> $LOG_FILE
    exit 0
else
    echo "$(date): Health check failed - HTTP $response" >> $LOG_FILE
    # Restart the service
    systemctl restart alumni-scheduler
    exit 1
fi
"""
    
    with open('health_check.sh', 'w') as f:
        f.write(monitoring_script)
    
    # Make it executable
    os.chmod('health_check.sh', 0o755)
    
    print("âœ… Created health_check.sh script")
    print("   Add to crontab: */5 * * * * /opt/alumni-scheduler/health_check.sh")

def create_backup_script():
    """Create backup script"""
    backup_script = """#!/bin/bash
# Alumni Event Scheduler Backup Script

BACKUP_DIR="/opt/backups/alumni-scheduler"
DATE=$(date +%Y%m%d_%H%M%S)
MONGO_URI="mongodb://admin:password123@localhost:27017/alumni_db?authSource=admin"

# Create backup directory
mkdir -p $BACKUP_DIR

# Backup MongoDB
mongodump --uri="$MONGO_URI" --out="$BACKUP_DIR/mongodb_$DATE"

# Backup uploaded files
tar -czf "$BACKUP_DIR/uploads_$DATE.tar.gz" /opt/alumni-scheduler/static/uploads

# Backup configuration
cp /opt/alumni-scheduler/.env.production "$BACKUP_DIR/env_$DATE"

# Clean up old backups (keep last 30 days)
find $BACKUP_DIR -type d -name "mongodb_*" -mtime +30 -exec rm -rf {} +
find $BACKUP_DIR -name "uploads_*.tar.gz" -mtime +30 -delete
find $BACKUP_DIR -name "env_*" -mtime +30 -delete

echo "$(date): Backup completed" >> /opt/alumni-scheduler/logs/backup.log
"""
    
    with open('backup.sh', 'w') as f:
        f.write(backup_script)
    
    # Make it executable
    os.chmod('backup.sh', 0o755)
    
    print("âœ… Created backup.sh script")
    print("   Add to crontab: 0 2 * * * /opt/alumni-scheduler/backup.sh")

def main():
    print("ðŸš€ Alumni Event Scheduler Production Setup")
    print("=" * 50)
    
    # Create necessary directories
    os.makedirs('logs', exist_ok=True)
    os.makedirs('ssl', exist_ok=True)
    
    # Generate configuration files
    create_production_env()
    create_nginx_config()
    create_systemd_service()
    create_gunicorn_config()
    create_logrotate_config()
    create_monitoring_script()
    create_backup_script()
    
    print("\n" + "=" * 50)
    print("âœ… Production setup completed!")
    print("\nNext steps:")
    print("1. Update .env.production with your actual configuration")
    print("2. Update nginx.conf with your domain and SSL certificates")
    print("3. Copy service files to appropriate system directories")
    print("4. Set up SSL certificates in the ssl/ directory")
    print("5. Configure monitoring and backup scripts")
    print("6. Deploy using docker-compose or manual installation")
    
    print("\nðŸ“š For detailed deployment instructions, see README.md")

if __name__ == "__main__":
    main()
